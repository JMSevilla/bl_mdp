// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WTW.MdpService.Infrastructure.MdpDb;

#nullable disable

namespace WTW.MdpService.Migrations
{
    [DbContext(typeof(MdpDbContext))]
    [Migration("20240722133530_AddWordingFlagsColumnForGenericJourney")]
    partial class AddWordingFlagsColumnForGenericJourney
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.Checkbox", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AnswerValue")
                        .HasColumnType("boolean");

                    b.Property<long>("CheckboxesListId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CheckboxesListId");

                    b.ToTable("Checkbox", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.CheckboxesList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CheckboxesListKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("JourneyStepId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JourneyStepId");

                    b.ToTable("CheckboxesList", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.GenericJourney", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessGroup")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTimeOffset?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsMarkedForRemoval")
                        .HasColumnType("boolean")
                        .HasColumnName("RemoveOnLogin");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WordingFlags")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.HasKey("Id");

                    b.HasAlternateKey("BusinessGroup", "ReferenceNumber", "Type");

                    b.ToTable("Journeys", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.JourneyBranch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long?>("JourneyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuoteSelectionJourneyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RetirementJourneyId")
                        .HasColumnType("bigint");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.Property<long?>("TransferJourneyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.HasIndex("QuoteSelectionJourneyId");

                    b.HasIndex("RetirementJourneyId");

                    b.HasIndex("TransferJourneyId");

                    b.ToTable("JourneyBranch", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.JourneyGenericData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FormKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GenericDataJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("JourneyStepId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JourneyStepId");

                    b.ToTable("JourneyGenericData", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.JourneyStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CurrentPageKey")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<bool>("IsNextPageAsDeadEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long>("JourneyBranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("NextPageKey")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SubmitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JourneyBranchId");

                    b.ToTable("JourneyStep", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.QuestionForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AnswerKey")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AnswerValue")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("JourneyStepId")
                        .HasColumnType("bigint");

                    b.Property<string>("QuestionKey")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.HasIndex("JourneyStepId")
                        .IsUnique();

                    b.ToTable("QuestionForm", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.UploadedDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessGroup")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("BGROUP");

                    b.Property<string>("DocumentSource")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsEdoc")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEpaOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("JourneyType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("REFNO");

                    b.Property<string>("Tags")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("UploadedDocument", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.Calculations.Calculation", b =>
                {
                    b.Property<string>("BusinessGroup")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("CalculationStatus")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EffectiveRetirementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EnteredLumpSum")
                        .HasColumnType("numeric");

                    b.Property<bool?>("IsCalculationSuccessful")
                        .HasColumnType("boolean");

                    b.Property<string>("QuotesJsonV2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("");

                    b.Property<string>("RetirementDatesAgesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("RetirementJourneyId")
                        .HasColumnType("bigint");

                    b.Property<string>("RetirementJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("");

                    b.Property<string>("RetirementJsonV2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("");

                    b.Property<string>("SelectedQuoteName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BusinessGroup", "ReferenceNumber");

                    b.HasIndex("RetirementJourneyId")
                        .IsUnique();

                    b.ToTable("Calculation", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.Calculations.TransferCalculation", b =>
                {
                    b.Property<string>("BusinessGroup")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<bool>("HasLockedInTransferQuote")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("TransferQuoteJson")
                        .HasColumnType("text");

                    b.HasKey("BusinessGroup", "ReferenceNumber");

                    b.ToTable("TransferCalculation", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.ContactConfirmation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessGroup")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FailedConfirmationAttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int?>("MaximumConfirmationAttemptCount")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<DateTimeOffset?>("ValidatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ContactConfirmation", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.QuoteSelectionJourney", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasAlternateKey("BusinessGroup", "ReferenceNumber");

                    b.ToTable("QuoteSelectionJourney", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.RetirementJourney", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("AcknowledgeFinancialAdvisor")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AcknowledgePensionWise")
                        .HasColumnType("boolean");

                    b.Property<string>("BusinessGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CaseNumber")
                        .HasColumnType("text");

                    b.Property<decimal?>("EnteredLtaPercentage")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinancialAdviseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GbgId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("OptOutPensionWise")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("PensionWiseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("SummaryPdf")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasAlternateKey("BusinessGroup", "ReferenceNumber");

                    b.ToTable("RetirementJourney", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.RetirementPostIndexEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BatchNumber")
                        .HasColumnType("integer");

                    b.Property<string>("BusinessGroup")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DbId")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<int>("RetirementApplicationImageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RetirementPostIndexEvent", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.TransferJourney", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CalculationType")
                        .HasColumnType("text");

                    b.Property<string>("CaseNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("DateOfPayment")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset?>("FinancialAdviseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GbgId")
                        .HasColumnType("uuid");

                    b.Property<string>("NameOfPlan")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("PensionWiseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransferImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int?>("TransferSummaryImageId")
                        .HasColumnType("integer");

                    b.Property<string>("TransferVersion")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("TypeOfPayment")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("BusinessGroup", "ReferenceNumber");

                    b.ToTable("TransferJourney", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.TransferJourneyContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdvisorName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SchemeName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("TransferJourneyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("TransferJourneyId");

                    b.ToTable("TransferJourneyContact", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.Checkbox", b =>
                {
                    b.HasOne("WTW.MdpService.Domain.Common.Journeys.CheckboxesList", null)
                        .WithMany("Checkboxes")
                        .HasForeignKey("CheckboxesListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.CheckboxesList", b =>
                {
                    b.HasOne("WTW.MdpService.Domain.Common.Journeys.JourneyStep", null)
                        .WithMany("CheckboxesLists")
                        .HasForeignKey("JourneyStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.JourneyBranch", b =>
                {
                    b.HasOne("WTW.MdpService.Domain.Common.Journeys.GenericJourney", null)
                        .WithMany("JourneyBranches")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WTW.MdpService.Domain.Mdp.QuoteSelectionJourney", null)
                        .WithMany("JourneyBranches")
                        .HasForeignKey("QuoteSelectionJourneyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WTW.MdpService.Domain.Mdp.RetirementJourney", null)
                        .WithMany("JourneyBranches")
                        .HasForeignKey("RetirementJourneyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WTW.MdpService.Domain.Mdp.TransferJourney", null)
                        .WithMany("JourneyBranches")
                        .HasForeignKey("TransferJourneyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.JourneyGenericData", b =>
                {
                    b.HasOne("WTW.MdpService.Domain.Common.Journeys.JourneyStep", null)
                        .WithMany("JourneyGenericDataList")
                        .HasForeignKey("JourneyStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.JourneyStep", b =>
                {
                    b.HasOne("WTW.MdpService.Domain.Common.Journeys.JourneyBranch", null)
                        .WithMany("JourneySteps")
                        .HasForeignKey("JourneyBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.QuestionForm", b =>
                {
                    b.HasOne("WTW.MdpService.Domain.Common.Journeys.JourneyStep", null)
                        .WithOne("QuestionForm")
                        .HasForeignKey("WTW.MdpService.Domain.Common.Journeys.QuestionForm", "JourneyStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.Calculations.Calculation", b =>
                {
                    b.HasOne("WTW.MdpService.Domain.Mdp.RetirementJourney", "RetirementJourney")
                        .WithOne("Calculation")
                        .HasForeignKey("WTW.MdpService.Domain.Mdp.Calculations.Calculation", "RetirementJourneyId");

                    b.Navigation("RetirementJourney");
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.RetirementJourney", b =>
                {
                    b.OwnsOne("WTW.MdpService.Domain.Mdp.MemberQuote", "MemberQuote", b1 =>
                        {
                            b1.Property<long>("RetirementJourneyId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("AnnuityPurchaseAmount")
                                .HasColumnType("numeric");

                            b1.Property<string>("CalculationType")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset?>("DateOfLeaving")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset?>("DatePensionableServiceCommenced")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("EarliestRetirementAge")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("FinalPensionableSalary")
                                .HasColumnType("numeric");

                            b1.Property<bool>("HasAvcs")
                                .HasColumnType("boolean");

                            b1.Property<string>("Label")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal>("LtaPercentage")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("LumpSumFromDb")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("LumpSumFromDc")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("MaximumLumpSum")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("MinimumLumpSum")
                                .HasColumnType("numeric");

                            b1.Property<int>("NormalRetirementAge")
                                .HasColumnType("integer");

                            b1.Property<DateTimeOffset>("NormalRetirementDate")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));

                            b1.Property<int>("PensionOptionNumber")
                                .HasColumnType("integer");

                            b1.Property<DateTimeOffset>("SearchedRetirementDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<decimal?>("SmallPotLumpSum")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("StatePensionDeduction")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("TaxFreeUfpls")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("TaxableUfpls")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("TotalLumpSum")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("TotalPension")
                                .HasColumnType("numeric");

                            b1.Property<string>("TotalPensionableService")
                                .HasColumnType("text");

                            b1.Property<decimal?>("TotalSpousePension")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("TotalUfpls")
                                .HasColumnType("numeric");

                            b1.Property<string>("TransferInService")
                                .HasColumnType("text");

                            b1.Property<decimal?>("TransferValueOfDc")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("TrivialCommutationLumpSum")
                                .HasColumnType("numeric");

                            b1.Property<string>("WordingFlags")
                                .HasColumnType("text");

                            b1.HasKey("RetirementJourneyId");

                            b1.ToTable("RetirementJourney");

                            b1.WithOwner()
                                .HasForeignKey("RetirementJourneyId");
                        });

                    b.Navigation("MemberQuote");
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.TransferJourneyContact", b =>
                {
                    b.HasOne("WTW.MdpService.Domain.Mdp.TransferJourney", null)
                        .WithMany("Contacts")
                        .HasForeignKey("TransferJourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("WTW.MdpService.Domain.Common.Address", "Address", b1 =>
                        {
                            b1.Property<long>("TransferJourneyContactId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Country")
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.Property<string>("CountryCode")
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)");

                            b1.Property<string>("PostCode")
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)");

                            b1.Property<string>("StreetAddress1")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("StreetAddress2")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("StreetAddress3")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("StreetAddress4")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("StreetAddress5")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("TransferJourneyContactId");

                            b1.ToTable("TransferJourneyContact");

                            b1.WithOwner()
                                .HasForeignKey("TransferJourneyContactId");
                        });

                    b.OwnsOne("WTW.MdpService.Domain.Email", "Email", b1 =>
                        {
                            b1.Property<long>("TransferJourneyContactId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Address")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("TransferJourneyContactId");

                            b1.ToTable("TransferJourneyContact");

                            b1.WithOwner()
                                .HasForeignKey("TransferJourneyContactId");
                        });

                    b.OwnsOne("WTW.MdpService.Domain.Phone", "Phone", b1 =>
                        {
                            b1.Property<long>("TransferJourneyContactId")
                                .HasColumnType("bigint");

                            b1.Property<string>("FullNumber")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("TransferJourneyContactId");

                            b1.ToTable("TransferJourneyContact");

                            b1.WithOwner()
                                .HasForeignKey("TransferJourneyContactId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.CheckboxesList", b =>
                {
                    b.Navigation("Checkboxes");
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.GenericJourney", b =>
                {
                    b.Navigation("JourneyBranches");
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.JourneyBranch", b =>
                {
                    b.Navigation("JourneySteps");
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Common.Journeys.JourneyStep", b =>
                {
                    b.Navigation("CheckboxesLists");

                    b.Navigation("JourneyGenericDataList");

                    b.Navigation("QuestionForm");
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.QuoteSelectionJourney", b =>
                {
                    b.Navigation("JourneyBranches");
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.RetirementJourney", b =>
                {
                    b.Navigation("Calculation");

                    b.Navigation("JourneyBranches");
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.TransferJourney", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("JourneyBranches");
                });
#pragma warning restore 612, 618
        }
    }
}
