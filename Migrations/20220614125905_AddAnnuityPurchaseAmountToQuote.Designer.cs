// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WTW.MdpService.Infrastructure.MdpDb;

#nullable disable

namespace WTW.MdpService.Migrations
{
    [DbContext(typeof(MdpDbContext))]
    [Migration("20220614125905_AddAnnuityPurchaseAmountToQuote")]
    partial class AddAnnuityPurchaseAmountToQuote
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.Calculations.Calculation", b =>
                {
                    b.Property<string>("BusinessGroup")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EffectiveRetirementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RetirementDatesAgesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("RetirementJourneyId")
                        .HasColumnType("bigint");

                    b.Property<string>("RetirementJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SelectedQuoteName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BusinessGroup", "ReferenceNumber");

                    b.HasIndex("RetirementJourneyId")
                        .IsUnique();

                    b.ToTable("Calculation", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.ContactConfirmation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessGroup")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FailedConfirmationAttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int?>("MaximumConfirmationAttemptCount")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<DateTimeOffset?>("ValidatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ContactConfirmation", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.JourneyBranch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("RetirementJourneyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RetirementJourneyId");

                    b.ToTable("JourneyBranch", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.JourneyStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CurrentPageKey")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<long>("JourneyBranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("NextPageKey")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTimeOffset>("SubmitDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JourneyBranchId");

                    b.ToTable("JourneyStep", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.MemberQuotesSearch", b =>
                {
                    b.Property<string>("BusinessGroup")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LatestCalculationRetirementDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BusinessGroup", "ReferenceNumber");

                    b.ToTable("MemberQuotesSearch", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.QuestionForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AnswerKey")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<long>("JourneyStepId")
                        .HasColumnType("bigint");

                    b.Property<string>("QuestionKey")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.HasIndex("JourneyStepId")
                        .IsUnique();

                    b.ToTable("QuestionForm", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.RetirementJourney", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("AcknowledgeFinancialAdvisor")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AcknowledgePensionWise")
                        .HasColumnType("boolean");

                    b.Property<string>("BusinessGroup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CaseNumber")
                        .HasColumnType("text");

                    b.Property<decimal?>("EnteredLtaPercentage")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GbgId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("SummaryPdf")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasAlternateKey("BusinessGroup", "ReferenceNumber");

                    b.ToTable("RetirementJourney", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.RetirementPostIndexEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BatchNumber")
                        .HasColumnType("integer");

                    b.Property<string>("BusinessGroup")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<int>("RetirementApplicationImageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("RetirementPostIndexEvent", (string)null);
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.Calculations.Calculation", b =>
                {
                    b.HasOne("WTW.MdpService.Domain.Mdp.RetirementJourney", "RetirementJourney")
                        .WithOne("Calculation")
                        .HasForeignKey("WTW.MdpService.Domain.Mdp.Calculations.Calculation", "RetirementJourneyId");

                    b.Navigation("RetirementJourney");
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.JourneyBranch", b =>
                {
                    b.HasOne("WTW.MdpService.Domain.Mdp.RetirementJourney", null)
                        .WithMany("JourneyBranches")
                        .HasForeignKey("RetirementJourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.JourneyStep", b =>
                {
                    b.HasOne("WTW.MdpService.Domain.Mdp.JourneyBranch", null)
                        .WithMany("JourneySteps")
                        .HasForeignKey("JourneyBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.QuestionForm", b =>
                {
                    b.HasOne("WTW.MdpService.Domain.Mdp.JourneyStep", null)
                        .WithOne("QuestionForm")
                        .HasForeignKey("WTW.MdpService.Domain.Mdp.QuestionForm", "JourneyStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.RetirementJourney", b =>
                {
                    b.OwnsOne("WTW.MdpService.Domain.Mdp.MemberQuote", "MemberQuote", b1 =>
                        {
                            b1.Property<long>("RetirementJourneyId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("AnnuityPurchaseAmount")
                                .HasColumnType("numeric");

                            b1.Property<string>("CalculationType")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset?>("DateOfLeaving")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset?>("DatePensionableServiceCommenced")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("EarliestRetirementAge")
                                .HasColumnType("integer");

                            b1.Property<decimal?>("FinalPensionableSalary")
                                .HasColumnType("numeric");

                            b1.Property<bool>("HasAvcs")
                                .HasColumnType("boolean");

                            b1.Property<string>("Label")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal>("LtaPercentage")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("LumpSumFromDb")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("LumpSumFromDc")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("MaximumLumpSum")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("MinimumLumpSum")
                                .HasColumnType("numeric");

                            b1.Property<int>("NormalRetirementAge")
                                .HasColumnType("integer");

                            b1.Property<DateTimeOffset>("NormalRetirementDate")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasDefaultValue(new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)));

                            b1.Property<int>("PensionOptionNumber")
                                .HasColumnType("integer");

                            b1.Property<DateTimeOffset>("SearchedRetirementDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<decimal?>("SmallPotLumpSum")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("StatePensionDeduction")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("TaxFreeUfpls")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("TaxableUfpls")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("TotalLumpSum")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("TotalPension")
                                .HasColumnType("numeric");

                            b1.Property<string>("TotalPensionableService")
                                .HasColumnType("text");

                            b1.Property<decimal?>("TotalSpousePension")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("TotalUfpls")
                                .HasColumnType("numeric");

                            b1.Property<string>("TransferInService")
                                .HasColumnType("text");

                            b1.Property<decimal?>("TransferValueOfDc")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("TrivialCommutationLumpSum")
                                .HasColumnType("numeric");

                            b1.Property<string>("WordingFlags")
                                .HasColumnType("text");

                            b1.HasKey("RetirementJourneyId");

                            b1.ToTable("RetirementJourney");

                            b1.WithOwner()
                                .HasForeignKey("RetirementJourneyId");
                        });

                    b.Navigation("MemberQuote");
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.JourneyBranch", b =>
                {
                    b.Navigation("JourneySteps");
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.JourneyStep", b =>
                {
                    b.Navigation("QuestionForm");
                });

            modelBuilder.Entity("WTW.MdpService.Domain.Mdp.RetirementJourney", b =>
                {
                    b.Navigation("Calculation");

                    b.Navigation("JourneyBranches");
                });
#pragma warning restore 612, 618
        }
    }
}
